#labels panstamp,pin,mapping,pinout,voltage,bootloader,fuses
= panStamp: technical details =

 * [panStamp#Pin_mapping Pin mapping]
 * [panStamp#Voltage_range Voltage range]
 * [panStamp#Programming_panStamps Programming panStamps]
 * [panStamp#Bootloader Bootloader]

= Pin mapping =
Sample sketches and libraries use either the Arduino pin naming, panStamp pin numbers or Atmega's port register/masks. Depending on the library being used and the degree of control to be achieved over the microcontroller I/O's, you'll find any of the mentioned conventions.

https://0cdf7099-a-3ce7cda5-s-sites.googlegroups.com/a/panstamp.com/panstamp/pinmap.png

= Voltage range =
panStamps have to be powered between 2.5 VDC and 3.6VDC

= Programming panStamps =
panStamps can be programmed in two ways:
 # *Serial programming*. This is the recommended way for programming panStamps, Like Arduinos, panStamps can be programmed serially, through the UART. In order to interface the panStamp UART from your computer, a panStick or any other USB-TTL or RS232-TTL adapter has to be used.
 # *In-Circuit programming (ICP)*. programming is done through the SPI port. This kind of programming requires you to use an ICP programmer for Atmega's (STK500 or similar). This programming method is not recommended since it erases the pre-installed bootloader.

[https://lh6.googleusercontent.com/-p5yT4u48UWI/T0QZpNQNFzI/AAAAAAAAAMY/Meq15WEX88k/s912/programports.png]

= Bootloader =

panStamps come with the Arduino bootloader preinstalled. Fuse values are listed here:

 * Extended = 0x05
 * High = 0xD8
 * Low = 0xE2