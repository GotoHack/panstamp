#labels panstamp,stack,swap,registers
*panStamp stack: the intelligence behind the scenes*

= Introduction =

The panStamp stack has been designed to simplify adoption by developers, reducing the need of custom code to the minimum and still occupy very low footprint (less than 6 Kb of Flash and less than 1 Kb of RAM). The stack also intends to isolate user code from SWAP communications so that developers can really focus on their applications without having to worry about incoming commands or queries or about having to send status packets.

= Details =

But, what is behind this magic? SWAP is a protocol that allows the creation of a register-centered stack. The stack core is precisely a table of register objects. This table consists of a mix of [SWAPregisters#Standard_registers standard registers] and custom ones and the index of each register within the table matches the register ID. This fact lets the stack link SWAP packets and registers quicly and efficiently without having to use intermediary look-up tables.

<p align="center">
https://lh5.googleusercontent.com/-9QFLyflo0ps/Tv8Jvt6PXHI/AAAAAAAAAE8/bEnWDiGKf9k/s610/registers.png
</p>

Register objects are simple collections of pointers that help trigger actions and access data upon reception of SWAP packets. Registers consist of a pointer to a data container (an array of bytes) and a couple of optional pointers to an _updater_ and a _setter_ function.

<p align="center">
https://lh6.googleusercontent.com/-NLw1J4iwLn8/Tv8RGoDk1uI/AAAAAAAAAFU/1sPtTc0vqD8/s339/regpointers.png
</p>

== Data container ==

Data containers can take any length so that, despite the limitation to 255 registers, panStamps' data limits actually reside in the amount of available RAM and not in the stack itself. When transmitting SWAP command and status packets, data is copied to/from these arrays, keeping the same format and length.

<p align="center">
https://lh5.googleusercontent.com/-TXXc-5cCiOA/Tv8V5UR0skI/AAAAAAAAAF8/gwFaGqXgr9w/s846/datacontainer_packet.png
</p>

== Updater function ==

== Setter function ==